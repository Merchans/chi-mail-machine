<?php

	/**
	 * Generated by the WordPress Meta Box Generator
	 * https://jeremyhixon.com/tool/wordpress-meta-box-generator/
	 *
	 * Retrieving the values:
	 * Date the email was sent = get_post_meta( get_the_ID(), 'chi_emaildate-the-email-was-sent', true )
	 * Time the email was sent = get_post_meta( get_the_ID(), 'chi_emailtime-the-email-was-sent', true )
	 * For = get_post_meta( get_the_ID(), 'chi_emailfor', true )
	 *  Notes on the text = get_post_meta( get_the_ID(), 'chi_emailnotes-on-the-text', true )
	 */
	class CHI_EMAIL_SENDER {
		private $config = '{"title":"Comments to E-mail","description":"If there are any comments on the email, please contact the author","prefix":"chi_email","domain":"chi-mail-machine","class_name":"CHI_EMAIL_SENDER","post-type":["post"],"context":"normal","priority":"low","cpt":"chi_email","fields":[{"type":"date","label":"Date the email was sent","id":"chi_emaildate-the-email-was-sent"},{"type":"time","label":"Time the email was sent","id":"chi_emailtime-the-email-was-sent"},{"type":"email","label":"For","id":"chi_emailfor"},{"type":"text","label":"Email Subject","id":"chi_emailemail-subject"},{"type":"textarea","label":" Notes on the text","id":"chi_emailnotes-on-the-text"}]}';

		public function __construct() {
			$this->config = json_decode( $this->config, true );
			$this->process_cpts();
			add_action( 'add_meta_boxes', [ $this, 'add_meta_boxes' ] );
			add_action( 'admin_head', [ $this, 'admin_head' ] );
			add_action( 'save_post', [ $this, 'save_post' ], 100 );
		}

		public function process_cpts() {
			if ( ! empty( $this->config['cpt'] ) ) {
				if ( empty( $this->config['post-type'] ) ) {
					$this->config['post-type'] = [];
				}
				$parts                     = explode( ',', $this->config['cpt'] );
				$parts                     = array_map( 'trim', $parts );
				$this->config['post-type'] = array_merge( $this->config['post-type'], $parts );
			}
		}

		public function add_meta_boxes() {
			foreach ( $this->config['post-type'] as $screen ) {
				add_meta_box(
						sanitize_title( $this->config['title'] ),
						$this->config['title'],
						[ $this, 'add_meta_box_callback' ],
						$screen,
						$this->config['context'],
						$this->config['priority']
				);
			}
		}

		public function admin_head() {
			global $typenow;
			if ( in_array( $typenow, $this->config['post-type'] ) ) {
				?><?php
			}
		}

		public function save_post( $post_id ) {

			// Stop WP from clearing custom fields on autosave
			if ( defined( 'DOING_AUTOSAVE' ) && DOING_AUTOSAVE or defined( 'DOING_AJAX' ) && DOING_AJAX ) {
				return;
			}

			$chi_email_author_state = get_post_meta( $post_id, 'chi_email_author_state', true );

			if ( $chi_email_author_state == "on" ) {

				if ( get_post_meta( $post_id, 'author_state_was_send', true ) != 1 ) {

					$sanitized = '<strong>Author: has completed the email.</strong>';

					$agent = $_SERVER['HTTP_USER_AGENT'];

					$data = array(
							'comment_post_ID'      => $post_id,
							'comment_author'       => 'system',
							'comment_author_email' => '',
							'comment_content'      => $sanitized,
							'comment_author_IP'    => get_the_user_ip(),
							'comment_agent'        => $agent,
							'comment_date'         => date( 'Y-m-d H:i:s' ),
							'comment_date_gmt'     => date( 'Y-m-d H:i:s' ),
							'comment_approved'     => 1,
					);

					wp_insert_comment( $data );
					if ( ! metadata_exists( 'post', $post_id, 'author_state_was_send' ) ) {
						add_post_meta( $post_id, 'author_state_was_send', 1 );
					}
				}

			} else {

				if ( metadata_exists( 'post', $post_id, 'author_state_was_send' ) ) {
					delete_post_meta( $post_id, 'author_state_was_send' );
				}
			}

			if ( isset( $_POST['chi_emailchoose-option'] ) ) {
				foreach ( $this->config['fields'] as $field ) {

					$sanitized = sanitize_text_field( $_POST[ $field['id'] ] );
					$user      = wp_get_current_user();
					$meta_key  = $field['id'] . '_user_' . $user->ID;

					switch ( $field['id'] ) {
						case 'chi_emailnotes-on-the-text':
							update_post_meta( $post_id, $meta_key, $sanitized );
							break;
						default:
							if ( ! ( in_array( 'administrator', (array) $user->roles ) ) ) {
								break;
							}
							update_post_meta( $post_id, $field['id'], $sanitized );
							break;
					}
				}

				//				if ( $_POST['chi_emailchoose-option'] == '1' ) {
//
//					foreach ( $this->config['fields'] as $field ) {
//
//
//						$sanitized = sanitize_text_field( $_POST[ $field['id'] ] );
//
//						switch ( $field['id'] ) {
//							case 'chi_emailnotes-on-the-text':
//
//								if ( isset( $_POST[ $field['id'] ] ) ) {
//
//									if ( empty( $_POST[ $field['id'] ] ) ) {
//										break;
//									}
//
//									$author_id = get_current_user_id();
//
//									$agent = $_SERVER['HTTP_USER_AGENT'];
//									$data  = array(
//											'comment_post_ID'      => $post_id,
//											'comment_author'       => get_the_author_meta( 'nickname', $author_id ),
//											'comment_author_email' => get_the_author_meta( 'user_email', $author_id ),
//											'comment_content'      => $sanitized,
//											'comment_author_IP'    => get_the_user_ip(),
//											'comment_agent'        => $agent,
//											'comment_date'         => date( 'Y-m-d H:i:s' ),
//											'comment_date_gmt'     => date( 'Y-m-d H:i:s' ),
//											'comment_approved'     => 1,
//									);
//
////									wp_insert_comment( $data );
//								}
//								break;
//							default:
//								$user = wp_get_current_user();
//								if ( ! ( in_array( 'administrator', (array) $user->roles ) ) ) {
//									break;
//								}
//								update_post_meta( $post_id, $field['id'], $sanitized );
//								break;
//
//						}
//					}
//				}
//				if ( $_POST['chi_emailchoose-option'] == '2' ) {
//					foreach ( $this->config['fields'] as $field ) {
//
//						$sanitized = sanitize_text_field( $_POST[ $field['id'] ] );
//
//						//RespiroNews - Newsletter č. 32R - rozesílka 8.4.2021 06:00
//						//						Dobrý deň,
//						//
//						//						poprosil by som Vás o nastavenie emailu 32R pre projekt RespiroNews
//						//						na zajtra tj. 8.4.2020 o 6h.
//						//
//						//						Predmet: Plicní embolie při COVID-19 – co je pro ni charakteristické?
//						//
//						//						Za skorú odpoveď
//						//						Ďakujem
//
//						if ( isset( $_POST['chi_email_taxonomy_select'] ) &&
//							 isset( $_POST['chi_email_special_number'] ) &&
//							 isset( $_POST['chi_emailfor'] ) &&
//							 isset( $_POST['chi_emailemail-subject'] ) &&
//							 isset( $_POST['chi_emaildate-the-email-was-sent'] ) &&
//							 isset( $_POST['chi_emailtime-the-email-was-sent'] ) &&
//							 isset( $_POST['chi_emailnotes-on-the-text'] ) ) {
//
//
//							$subject_data = ucwords( $_POST['chi_email_taxonomy_select'] ) . ' - Newsletter č. ' . $_POST['chi_email_special_number'] . ' - rozesílka ' . $_POST['chi_emaildate-the-email-was-sent'] . ' ' . $_POST['chi_emailtime-the-email-was-sent'];
//
//							$subject = sanitize_text_field( $subject_data );
//
//							$message = nl2br( 'Dobrý deň,<br><br>Poprosil by som Vás o nastavenie emailu č. <strong>' . $_POST['chi_email_special_number'] . '</strong> pre projekt <strong>' . ucwords( $_POST['chi_email_taxonomy_select'] ) . '</strong> na <strong>' . $_POST['chi_emaildate-the-email-was-sent'] . '</strong> o <strong>' . $_POST['chi_emailtime-the-email-was-sent'] . '</strong>.<br><br>Predmet: <strong>' . get_the_title() . '</strong><br><br>Za skorú odpoveď<br>Ďakujem', true );
//
//						}
//						// chi_email_taxonomy_select
//						// chi_email_special_number
//						// chi_emailfor
//						// chi_emailemail-subject
//						// chi_emaildate-the-email-was-sent
//						// chi_emailtime-the-email-was-sent
//						// chi_emailnotes-on-the-text
//
//						switch ( $field['id'] ) {
//							case 'chi_emailnotes-on-the-text':
//								if ( isset( $_POST[ $field['id'] ] ) ) {
//
//									if ( ! empty( $_POST[ $field['id'] ] ) ) {
//										break;
//									}
//
//									$author_id = get_current_user_id();
//
//									$agent = $_SERVER['HTTP_USER_AGENT'];
//									$data  = array(
//											'comment_post_ID'      => $post_id,
//											'comment_author'       => get_the_author_meta( 'nickname', $author_id ),
//											'comment_author_email' => get_the_author_meta( 'user_email', $author_id ),
//											'comment_content'      => $message,
//											'comment_author_IP'    => get_the_user_ip(),
//											'comment_agent'        => $agent,
//											'comment_date'         => date( 'Y-m-d H:i:s' ),
//											'comment_date_gmt'     => date( 'Y-m-d H:i:s' ),
//											'comment_approved'     => 1,
//									);
//
//									$comment_id = wp_insert_comment( $data );
//									add_comment_meta( $comment_id, 'subject', $subject );
//
//								}
//								break;
//							default:
//								$user = wp_get_current_user();
//								if ( ! ( in_array( 'administrator', (array) $user->roles ) ) ) {
//									break;
//								}
//								update_post_meta( $post_id, $field['id'], $sanitized );
//								break;
//
//						}
//					}
//				}
//				if ( $_POST['chi_emailchoose-option'] == '3' ) {
//					foreach ( $this->config['fields'] as $field ) {
//
//						$sanitized = sanitize_text_field( $_POST[ $field['id'] ] );
//
//						if ( isset( $_POST['chi_emailfor'] ) &&
//							 isset( $_POST['chi_emailemail-subject'] ) &&
//							 isset( $_POST['chi_emailnotes-on-the-text'] ) ) {
//
//
//							$subject = sanitize_text_field( $_POST['chi_emailemail-subject'] );
//							$message = sanitize_text_field( $_POST['chi_emailnotes-on-the-text'] );
//
//						}
//
//						switch ( $field['id'] ) {
//							case 'chi_emailnotes-on-the-text':
//								if ( isset( $_POST[ $field['id'] ] ) ) {
//
//									if ( empty( $_POST[ $field['id'] ] ) ) {
//										break;
//									}
//
//									$author_id = get_current_user_id();
//
//									$agent = $_SERVER['HTTP_USER_AGENT'];
//									$data  = array(
//											'comment_post_ID'      => $post_id,
//											'comment_author'       => get_the_author_meta( 'nickname', $author_id ),
//											'comment_author_email' => get_the_author_meta( 'user_email', $author_id ),
//											'comment_content'      => $message,
//											'comment_author_IP'    => get_the_user_ip(),
//											'comment_agent'        => $agent,
//											'comment_date'         => date( 'Y-m-d H:i:s' ),
//											'comment_date_gmt'     => date( 'Y-m-d H:i:s' ),
//											'comment_approved'     => 1,
//									);
//
//									$comment_id = wp_insert_comment( $data );
//									add_comment_meta( $comment_id, 'subject', $subject );
//
//								}
//								break;
//							default:
//								$user = wp_get_current_user();
//								if ( ! ( in_array( 'administrator', (array) $user->roles ) ) ) {
//									break;
//								}
//								update_post_meta( $post_id, $field['id'], $sanitized );
//								break;
//
//						}
//					}
//				}

			}
		}

		public function add_meta_box_callback() {
			echo '<div class="rwp-description">' . $this->config['description'] . '</div>';
			$this->fields_table();
		}

		private function fields_table() {
			$args     = array(
					'post_id' => get_the_ID(),   // Use post_id, not post_ID
			);
			$comments = get_comments( $args );

			?>
			<ul class="order_notes">
				<?php foreach ( $comments as $comment ) : ?>
					<li rel="<?php $comment->comment_ID; ?>" class="note">
						<div class="note_content <?php echo( get_comment_meta( $comment->comment_ID, 'subject', true ) ? 'note_content--info' : '' ) ?>
<?php echo ( $comment->comment_author == "system" ) ? "note_content--system" : "" ?>">
							<?php if ( get_comment_meta( $comment->comment_ID, 'subject', true ) ) : ?>
								<p>Predmet emailu:
									<strong><?php echo get_comment_meta( $comment->comment_ID, 'subject', true ) ?></strong>
								</p>
							<?php endif ?>
							<p><?php echo $comment->comment_content; ?></p>
						</div>
						<p class="meta">
							<abbr class="exact-date" title="<?php echo $comment->comment_date_gmt ?>">
								<?php echo $comment->comment_date; ?></abbr>
							<?php echo $comment->comment_author; ?>
							<a href="<?php echo admin_url( '/comment.php?action=editcomment&c=' . $comment->comment_ID . '' ); ?>"
							   class="vim-q comment-inline button-link" role="button">Edit note</a> |
							<?php
								$del_nonce = esc_html( '_wpnonce=' . wp_create_nonce( "delete-comment_$comment->comment_ID" ) );
								$trash_url = $trash_url = esc_url( "comment.php?action=trashcomment&p=$comment->comment_post_ID&c=$comment->comment_ID&$del_nonce&reason=1" );
							?>
							<a href="<?php echo $trash_url ?>"
							   class="delete_note" role="button">Delete
								note</a>
						</p>
					</li>
				<?php endforeach ?>
			</ul>
			<table class="form-table" role="presentation">
				<tbody><?php
					foreach ( $this->config['fields'] as $field ) {
						?>
					<tr class="tr-<?php echo $field['id'] ?>">
						<th scope="row"><?php $this->label( $field ); ?></th>
						<td><?php $this->field( $field ); ?></td>
						</tr><?php
					}
				?>
				<tr>
					<th scope="row">
						<label for="<?php echo $this->config['prefix'] ?>choose-option">Choose an option:</label>
					</th>
					<td>
						<select name="<?php echo $this->config['prefix'] ?>choose-option"
								id="<?php echo $this->config['prefix'] ?>choose-option">
							<option value="1">Email note</option>
							<?php if ( ( in_array( 'administrator', (array) wp_get_current_user()->roles ) ) ) : ?>
								<option value="2">Sending an email to an external company</option>
								<option value="3">Edit email</option>
							<?php endif ?>
						</select>
						<input id="publishComment" class="button-primary" type="submit" value="Send" accesskey="p"
							   tabindex="5"
							   name="Send" data-id="<?php the_ID(); ?>">
						<span class="spinner"></span>
					</td>
				</tr>
				</tbody>
			</table>
			<?php
		}


		private function label( $field ) {
			switch ( $field['type'] ) {
				default:
					printf(
							'<label class="" for="%s">%s</label>',
							$field['id'], $field['label']
					);
			}
		}

		private function field( $field ) {
			switch ( $field['type'] ) {
				case 'date':
				case 'time':
					$this->input_minmax( $field );
					break;
				case 'textarea':
					$this->textarea( $field );
					break;
				default:
					$this->input( $field );
			}
		}

		private function input( $field ) {
			printf(
					'<input class="regular-text %s" id="%s" name="%s" %s type="%s" value="%s" autocomplete="off">',
					isset( $field['class'] ) ? $field['class'] : '',
					$field['id'], $field['id'],
					isset( $field['pattern'] ) ? "pattern='{$field['pattern']}'" : '',
					$field['type'],
					$this->value( $field )
			);
		}

		private function input_minmax( $field ) {
			printf(
					'<input class="regular-text" id="%s" %s %s name="%s" %s type="%s" value="%s" autocomplete="off">',
					$field['id'],
					isset( $field['max'] ) ? "max='{$field['max']}'" : '',
					isset( $field['min'] ) ? "min='{$field['min']}'" : '',
					$field['id'],
					isset( $field['step'] ) ? "step='{$field['step']}'" : '',
					$field['type'],
					$this->value( $field )
			);
		}

		private function textarea( $field ) {
			printf(
					'<textarea class="regular-text" id="%s" name="%s" rows="%d">%s</textarea>',
					$field['id'], $field['id'],
					isset( $field['rows'] ) ? $field['rows'] : 5,
					$this->value( $field )
			);
		}

		private function value( $field ) {

			global $post;
			$user     = wp_get_current_user();
			$meta_key = $field['id'] . '_user_' . $user->ID;

			if ( metadata_exists( 'post', $post->ID, $meta_key ) ) {
				$value = get_post_meta( $post->ID, $meta_key, true );
			} elseif ( metadata_exists( 'post', $post->ID, $field['id'] ) ) {
				$value = get_post_meta( $post->ID, $field['id'], true );
			} else if ( isset( $field['default'] ) ) {
				$value = $field['default'];
			} else {
				return '';
			}

			return str_replace( '\u0027', "'", $value );
		}

		public function example_ajax_request() {

			// The $_REQUEST contains all the data sent via AJAX from the Javascript call
			if ( isset( $_REQUEST ) ) {

				$data = $_REQUEST['data'];

				switch ( $data['option'] ) {
					case 1:
						$sanitized = sanitize_text_field( $data['noteText'] );

						$author_id = get_current_user_id();

						$data[] = get_the_author_meta( 'nickname', $author_id );

						$agent = $_SERVER['HTTP_USER_AGENT'];
						$data  = array(
								'comment_post_ID'      => $_REQUEST['post_id'],
								'comment_author'       => get_the_author_meta( 'nickname', $author_id ),
								'comment_author_email' => get_the_author_meta( 'user_email', $author_id ),
								'comment_content'      => $sanitized,
								'comment_author_IP'    => get_the_user_ip(),
								'comment_agent'        => $agent,
								'comment_date'         => date( 'Y-m-d H:i:s' ),
								'comment_date_gmt'     => date( 'Y-m-d H:i:s' ),
								'comment_approved'     => 1,
						);

						$comment_id = wp_insert_comment( $data );

						if ( $comment_id ) {
							$meta_key = 'chi_emailnotes-on-the-text_user_' . $author_id;
							delete_post_meta( $_REQUEST['post_id'], $meta_key );
						}

						$data['comment_id'] = $comment_id;

						echo json_encode( $data );
						break;
					case 2:
						if ( ! isset( $data["taxonomuSelect"] ) or
							 ! isset( $data["specialNumber"] ) or
							 ! isset( $data["noteDate"] ) or
							 ! isset( $data["noteTime"] ) or
							 ! isset( $data["postTitle"] ) or
							 ( $data["postTitle"] == "" ) or
							 ( $data["specialNumber"] == "" ) or
							 ( $data["noteDate"] == "" ) or
							 ( $data["noteTime"] == "" ) or
							 ( $data["postTitle"] == "" )
						) {
							break;
						}
						$subject_data = '' . ucfirst( $data["taxonomuSelect"] ) . ' - Newsletter č. ' . $data['specialNumber'] . ' - rozesílka ' . $data['noteDate'] . ' ' . $data['noteTime'];
						$email_text   = 'Dobrý deň,<br><br>
							Poprosil by som Vás o nastavenie emailu č. <strong>' . $data["specialNumber"] . '</strong> pre projekt
							<strong>' . $data["taxonomuSelect"] . '</strong> na <strong>' . $data["noteDate"] . '</strong> o <strong>' . $data["noteTime"] . 'h.</strong><br><br>
							Predmet: <strong>' . $data["postTitle"] . '</strong><br><br>
							Za skorú odpoveď<br>
							Ďakujem';

						$author_id = get_current_user_id();

						$data[] = get_the_author_meta( 'nickname', $author_id );

						$agent = $_SERVER['HTTP_USER_AGENT'];
						$data  = array(
								'comment_post_ID'      => $_REQUEST['post_id'],
								'comment_author'       => get_the_author_meta( 'nickname', $author_id ),
								'comment_author_email' => get_the_author_meta( 'user_email', $author_id ),
								'comment_content'      => $email_text,
								'comment_author_IP'    => get_the_user_ip(),
								'comment_agent'        => $agent,
								'comment_date'         => date( 'Y-m-d H:i:s' ),
								'comment_date_gmt'     => date( 'Y-m-d H:i:s' ),
								'comment_approved'     => 1,
						);


						$data['subject_data'] = $subject_data;
						$subject              = sanitize_text_field( $subject_data );

						$comment_id = wp_insert_comment( $data );
						if ( $comment_id ) {
							add_comment_meta( $comment_id, 'subject', $subject );
						}

						$data['comment_id'] = $comment_id;

						echo json_encode( $data );
						break;
				}
			}
			// Always die in functions echoing AJAX content
			wp_die();
		}

		public function chi_ajax_all_useres() {

			$request = $_REQUEST['email']['term'];

			if ( $request ) {
				$users      = get_users();
				$find_email = [];

				foreach ( $users as $user ) {

					$user_email = get_userdata( $user->ID )->user_email;

					if ( strpos( $user_email, $request ) !== false ) {
						$find_email[] = $user_email;
					}


				}

				echo json_encode( $find_email );
			}
			die();
		}

		public function delete_comment_ajax_request() {

			// The $_REQUEST contains all the data sent via AJAX from the Javascript call
			if ( isset( $_REQUEST ) ) {
				$comment_url    = $_REQUEST['comment_id'];
				$url_components = parse_url( $comment_url );
				parse_str( $url_components['query'], $params );

				$is_comment_deleted = wp_delete_comment( $params['c'] );
				if ( $is_comment_deleted ) {
					delete_comment_meta( $params['c'], 'subject' );
				}
			}

			// Always die in functions echoing AJAX content
			die();
		}


		public function save_statistic_url() {
			$post_id   = $_REQUEST['post_id'];
			$input_val = $_REQUEST['input_val'];
			if ( $post_id ) {
				if ( filter_var( $input_val, FILTER_VALIDATE_URL ) === false ) {
					echo  'Not a valid URL';
					die( );
				}
				update_post_meta( $post_id, 'statistic_url', $input_val );

				$curl = curl_init();

				curl_setopt( $curl, CURLOPT_URL, $input_val );
				curl_setopt( $curl, CURLOPT_SSL_VERIFYPEER, $input_val );
				curl_setopt( $curl, CURLOPT_RETURNTRANSFER, $input_val );

				$result = curl_exec( $curl );

				preg_match_all( '/<table.*?>(.*?)<\/table>/si', $result, $matches );

				$sentences = $matches[1];

				$list = array();
				for ( $i = 0; $i < 1; $i ++ ) {
					$sentence = strip_tags( $sentences[ $i ], '<table><tbody><td><tr>' );
					preg_match_all( '/\d+\.?\d*/', $sentence, $matches );
					$list[] = $matches;
				}
				$all_respondents = $list[0][0][2];
				$all_open_email  = $list[0][0][3];
				$all_web_opens   = $list[0][0][4];

				update_post_meta( $post_id, 'all_respondents', $all_respondents );
				update_post_meta( $post_id, 'all_open_email', $all_open_email );
				update_post_meta( $post_id, 'all_web_opens', $all_web_opens );

				echo "R: " . $all_respondents . " E: " . $all_open_email . " W: " . $all_web_opens . "";

			}
			die();
		}


	}


